import React from "react";
import { Link } from "react-router";
import * as components from "./components/index";
import cx from "classnames";
import styles from "./styles/home.scss";
import cloneDeep from "lodash/cloneDeep";
import {Row, Col, Input} from "apparena-patterns-react";

export default class Home extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            currentComponent: undefined,
            searchQuery: "",
            categories: {
            {{#categorize categories}}
                "{{ name }}": {
                    visible: {{ visible }},
                    components: [
                        {{#each componentList}}
                            "{{this}}",
                        {{/each}}
                    ],
                },
            {{/categorize}}
            }
        };

        this.backupCategories = this.state.categories;
    }

    componentWillMount() {
        if (this.props.location !== undefined) {
            const location = this.props.location.pathname.split("/");
            if (Array.isArray(location) && location.length === 2) {
                this.setState({
                    currentComponent: components[location[1]],
                });
            }
        }
    }

    componentWillReceiveProps(nextProps, nextContext) {
        if (nextProps.params && nextProps.params.component) {
            this.setState({
                currentComponent: components[nextProps.params.component],
            });
        } else if (nextProps.route && nextProps.route.path === "/") {
            this.setState({
                currentComponent: undefined,
            });
        }
    }

    toggleVisibility(target) {
        const state = this.state;
        state.categories[target].visible = !state.categories[target].visible;
        this.setState({
            state
        })
    }

    search(e) {
        this.setState({
            searchQuery: e.target.value,
        }, () => {
            if (this.state.searchQuery !== "") {
                const categories = cloneDeep(this.backupCategories);
                Object.keys(categories).forEach((cat) => {
                    categories[cat].components = categories[cat].components.filter((comp) => {
                        return comp.toLowerCase().includes(this.state.searchQuery.toLowerCase());
                    });

                    categories[cat].visible = categories[cat].components.length !== 0;
                });

                this.setState({
                    categories,
                });
            } else {
                this.setState({
                    categories: this.backupCategories,
                });
            }
        })
    }

    render() {
        return (
            <div>
                <div className={styles.topNav}>
                    <div className={styles.topNavImg}>
                        <img src="assets/logo.png" role="presentation" />
                    </div>
                    <div className={styles.topNavHeader}>
                        <Link to="/">App-Arena Dokumentationsplattform</Link>
                    </div>
                </div>
                <Row className={styles.pageWidthFix}>
                    <Col xs="2" className={styles.navMenu}>
                        <div className={styles.searchInput}>
                            <label htmlFor="searchInput">Suchen</label>
                            <Input id="searchInput" onChange={::this.search} defaultValue={this.state.searchQuery}/>
                        </div>
                    {{#each categoryNames}}
                        <div className={cx(!this.state.categories["{{this}}"].visible && styles.invisible, styles.listItemWrapper)}>
                            <div onClick={this.toggleVisibility.bind(this, "{{this}}")} className={styles.listHeader}>{{this}}</div>
                            <ul className={cx(!this.state.categories["{{this}}"].visible && styles.invisible, styles.listEntries)}>
                                {this.state.categories["{{this}}"].components.map((component, i) => {
                                    return (
                                        <li key={i}>
                                            <Link to={`/${component}`}>{component}</Link>
                                        </li>
                                    )
                                })}
                            </ul>
                        </div>
                    {{/each}}
                    </Col>

                    <Col xs="9" className={cx(styles.widthFix, styles.mainContent)}>
                        {this.state.currentComponent !== undefined ? <this.state.currentComponent /> : (
                            <div>
                                <h3>Willkommen zur Dokumentationsplattform</h3>
                                <p>
                                    Klicken Sie auf eine Komponente um zu ihrer Dokumentation zu gelangen!
                                </p>
                            </div>
                        )}
                    </Col>
                </Row>
            </div>
        );
    }
}
